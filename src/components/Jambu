import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import { db, auth } from "../firebase/config.jsx";
import { fetchTrailer } from "../utils/youtubeApi.jsx";
import { collection, addDoc, query, where, onSnapshot, deleteDoc, doc } from "firebase/firestore";
import { motion } from "framer-motion";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { updateDoc } from "firebase/firestore";

const API_KEY = "8756c43a";

const categoryColors = {
  Action: "border-danger",
  Comedy: "border-warning",
  Drama: "border-primary",
  Horror: "border-dark",
  Romance: "border-pink",
  SciFi: "border-info",
  Others: "border-secondary",
};

const MovieList = () => {
  const [movie, setMovie] = useState("");
  const [year, setYear] = useState("");
  const [moviesByCategory, setMoviesByCategory] = useState({});
  const [picked, setPicked] = useState(null);
  const [trailerUrl, setTrailerUrl] = useState(null);
  const [expandedMovieId, setExpandedMovieId] = useState(null);  // Track the expanded card
  const [loading, setLoading] = useState(false);
  const [statusFilter, setStatusFilter] = useState("wishlist");
  const [darkMode, setDarkMode] = useState(false);
  const [newlyAddedId, setNewlyAddedId] = useState(null);
  const trailerRef = useRef(null);
  const user = auth.currentUser;
  const movieRefs = useRef({});

  const handleTrailer = async (title) => {
    const url = await fetchTrailer(title);
    if (url) {
      setTrailerUrl(url);
      setTimeout(() => {
        trailerRef.current?.scrollIntoView({ behavior: "smooth" });
      }, 100);
    } else {
      toast.error("Trailer not found.");
    }
  };

  useEffect(() => {
    if (!user) return;

    const q = query(collection(db, "movies"), where("uid", "==", user.uid));
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const movies = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

      const grouped = {};
      movies
        .filter((m) => m.status === statusFilter)
        .forEach((movie) => {
          const cat = movie.category || "Others";
          if (!grouped[cat]) grouped[cat] = [];
          grouped[cat].push(movie);
        });

      setMoviesByCategory(grouped);
    });

    return () => unsubscribe();
  }, [user, statusFilter]);

  const fetchMovieDetails = async (title, yearInput) => {
    try {
      const url = `https://www.omdbapi.com/?t=${encodeURIComponent(title)}${yearInput ? `&y=${yearInput}` : ""
        }&apikey=${API_KEY}`;
      const res = await axios.get(url);
      if (res.data.Response === "True") {
        return {
          name: res.data.Title,
          poster: res.data.Poster !== "N/A" ? res.data.Poster : null,
          category: res.data.Genre?.split(",")[0].trim() || "Others",
          plot: res.data.Plot || "Plot not available",
          actors: res.data.Actors || "Cast not available",
          website: res.data.Website || "Not available",
          imdb: res.data.imdbRating || "N/A",
        };
      }
    } catch (error) {
      console.error("OMDb Error:", error);
    }
    return null;
  };

  const handleAddMovie = async () => {
    if (!movie.trim()) return;

    setLoading(true);

    try {
      const details = await fetchMovieDetails(movie, year);
      if (details) {
        const docRef = await addDoc(collection(db, "movies"), {
          ...details,
          uid: user.uid,
          createdAt: new Date(),
          status: "wishlist",
        });
        setNewlyAddedId(docRef.id);        
        setMovie("");
        setYear("");
        toast.success("Movie added!");
      } else {
        toast.error("Movie not found. Please check the title.");
      }
    } catch (err) {
      console.error("Error adding movie:", err);
      toast.error("An error occurred. Try again.");
    }

    setLoading(false);
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter") handleAddMovie();
  };

  const handleDelete = async (id) => {
    await deleteDoc(doc(db, "movies", id));
    toast.info("Movie deleted.");
  };

  const handlePick = () => {
    const allMovies = Object.values(moviesByCategory).flat();
    if (allMovies.length === 0) return setPicked("No movies in list");
    const random = allMovies[Math.floor(Math.random() * allMovies.length)];
    setPicked(random.name);
  };

  const toggleExpand = (id) => {
    setExpandedMovieId(expandedMovieId === id ? null : id); // Toggle expansion for the clicked movie
  };

  const toggleStatus = async (id, newStatus) => {
    try {
      const movieRef = doc(db, "movies", id);
      await updateDoc(movieRef, { status: newStatus });
    } catch (err) {
      console.error("Error updating movie status:", err);
    }
  };

  const themeClass = darkMode ? "bg-black text-white" : "bg-light text-dark";

  useEffect(() => {
    if (newlyAddedId && movieRefs.current[newlyAddedId]) {
      movieRefs.current[newlyAddedId].scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
      setNewlyAddedId(null); // ‚úÖ Clear it so it doesn't scroll again
    }
  }, [moviesByCategory, newlyAddedId]);

  return (
    <div className={`container my-4 ${themeClass}`}>
      <ToastContainer />
      <div className="d-flex justify-content-between align-items-center mb-3">
        <div>
          <button
            className={`btn btn-${statusFilter === "wishlist" ? "secondary" : "outline-secondary"} me-2`}
            onClick={() => setStatusFilter("wishlist")}
          >
            üéØ Wishlist
          </button>
          <button
            className={`btn btn-${statusFilter === "watched" ? "secondary" : "outline-secondary"}`}
            onClick={() => setStatusFilter("watched")}
          >
            ‚úÖ Watched
          </button>
        </div>
        <button
          className="btn bg-dark btn-outline-warning"
          onClick={() => setDarkMode(!darkMode)}
        >
          üåô {darkMode ? "Light Mode" : "Dark Mode"}
        </button>
      </div>

      <div className="row g-2 mb-3">
        <div className="col-md-5">
          <input
            value={movie}
            onChange={(e) => setMovie(e.target.value)}
            onKeyDown={handleKeyPress}
            placeholder="Enter movie name"
            className="form-control"
          />
        </div>
        <div className="col-md-4">
          <input
            value={year}
            onChange={(e) => setYear(e.target.value)}
            onKeyDown={handleKeyPress}
            placeholder="Year (optional)"
            className="form-control"
          />
        </div>
        <div className="col-md-3">
          <button className="btn btn-danger w-100" onClick={handleAddMovie}>
            ‚ûï Add
          </button>
          {loading && <p className="text-info mt-2">Adding movie...</p>}
        </div>
      </div>

      {Object.keys(moviesByCategory).map((category) => (
        <div key={category} className="mb-5">
          <h4 className="mb-3">{category}</h4>
          <div className="row g-2 mb-3">
  {moviesByCategory[category].map((m) => (
    <div
      key={m.id}
      ref={(el) => (movieRefs.current[m.id] = el)} // Store each card's reference
      className={`card me-3 mb-3 shadow-sm hover-scale ${categoryColors[m.category] || "border-light"} ${
        expandedMovieId === m.id ? "scale-up" : ""
      }`} // Apply scale-up class only to the clicked card
      style={{
        minWidth: "160px",
        maxWidth: "200px",
        flex: "0 0 auto",
        background: darkMode ? "#222" : "#fff",
        color: darkMode ? "#fff" : "#000",
        borderWidth: "2px",
        transition: "transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out", // Smooth transition for scaling
      }}
      onClick={() => toggleExpand(m.id)} // Toggle expand state on card click
    >
      <div>
        {m.poster ? (
          <img
            src={m.poster}
            alt={m.name}
            className="card-img-top"
            style={{ height: "220px", objectFit: "cover" }}
          />
        ) : (
          <div
            className="d-flex align-items-center justify-content-center"
            style={{ height: "220px", background: "#444" }}
          >
            No Poster
          </div>
        )}
        <h6 className="text-center bg-dark bg-opacity-75 text-white p-1 m-0">{m.name}</h6>
      </div>

      <div className="card-body p-2">
        <div className="d-flex justify-content-between mb-2">
          <button
            className="btn btn-sm btn-outline-danger"
            onClick={() => handleDelete(m.id)}
          >
            ‚ùå
          </button>
          <button
            className="btn btn-sm btn-outline-info"
            onClick={() => handleTrailer(m.name)}
          >
            ‚ñ∂
          </button>
        </div>
        <button
          className="btn btn-sm btn-outline-success mt-2 w-100"
          onClick={() =>
            toggleStatus(m.id, statusFilter === "wishlist" ? "watched" : "wishlist")
          }
        >
          {statusFilter === "wishlist" ? "‚úî Move to Watched" : "üéØ Move to Wishlist"}
        </button>

        {expandedMovieId === m.id && (
          <div className="mt-2">
            <p><strong>Plot:</strong> {m.plot}</p>
            <p><strong>Cast:</strong> {m.actors}</p>
            <p><strong>IMDb:</strong> ‚≠ê {m.imdb}</p>
            <p>
              <strong>Watch:</strong>{" "}
              {m.website && m.website !== "N/A" && m.website !== "Not available" ? (
                <a href={m.website} target="_blank" rel="noreferrer" className="text-info">
                  Click here
                </a>
              ) : (
                "Not available"
              )}
            </p>
          </div>
        )}
      </div>
    </div>
  ))}
</div>

        </div>
      ))}

      <div className="text-center mt-4">
        <button className="btn btn-danger btn-lg" onClick={handlePick}>
          üé≤ Pick Random Movie
        </button>
      </div>

      {picked && (
        <motion.p
          key={picked}
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 1 }}
          className="text-center mt-3 fs-5 text-success"
        >
          üé¨ You should watch: <strong>{picked}</strong>
        </motion.p>
      )}

      {trailerUrl && (
        <div ref={trailerRef} className="mt-4 text-center">
          <iframe
            width="560"
            height="315"
            src={trailerUrl}
            title="YouTube Trailer"
            frameBorder="0"
            allow="autoplay; encrypted-media"
            allowFullScreen
          ></iframe>
        </div>
      )}
    </div>
  );
};

export default MovieList;
